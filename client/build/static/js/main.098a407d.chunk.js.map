{"version":3,"sources":["components/Message.js","components/Chat.js","components/Home.js","components/NoMatch.js","App.js","reportWebVitals.js","index.js"],"names":["Message","el","msg","useRef","useEffect","current","scrollIntoView","behavior","className","ref","username","time","text","propTypes","users","PropTypes","array","messages","updateUsers","func","updateMessages","Chat","useState","setMsg","serverRoom","setServerRoom","URLSearchParams","window","location","search","get","room","socket","io","connect","emit","on","message","disconnect","to","id","map","i","onSubmit","e","preventDefault","onChange","target","value","trim","type","placeholder","required","Home","setUsername","setRoom","htmlFor","name","NoMatch","useLocation","history","useHistory","setTimeout","push","pathname","App","setUsers","setMessages","exact","path","oldMsges","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.098a407d.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\nimport { useEffect, useRef } from \"react\";\r\n\r\nconst Message = ({ el }) => {\r\n  const msg = useRef(\"\");\r\n\r\n  useEffect(() => {\r\n    // To make new messages visible\r\n    msg.current.scrollIntoView({ behavior: \"smooth\" });\r\n  });\r\n\r\n  return (\r\n    <div className=\"message\" ref={msg}>\r\n      <p className=\"meta\">\r\n        {el.username}\r\n        <span>{el.time}</span>\r\n      </p>\r\n      <p className=\"text\">{el.text}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nMessage.propTypes = {\r\n  el: PropTypes.object,\r\n};\r\n\r\nexport default Message;\r\n","import { useState, useEffect, useRef } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport io from \"socket.io-client\";\r\nimport Message from \"./Message\";\r\n\r\nconst Chat = ({ users, updateUsers, messages, updateMessages }) => {\r\n  const [msg, setMsg] = useState(\"\");\r\n  const [serverRoom, setServerRoom] = useState(\"\");\r\n  const username = new URLSearchParams(window.location.search).get(\"username\");\r\n  const room = new URLSearchParams(window.location.search).get(\"room\");\r\n\r\n  const socket = useRef();\r\n\r\n  useEffect(() => {\r\n    //connection with the server\r\n    socket.current = io.connect(\"/\");\r\n    // Join chatroom\r\n    socket.current.emit(\"joinRoom\", { username, room });\r\n\r\n    //Listen Messages from the server\r\n    socket.current.on(\"message\", (message) => {\r\n      updateMessages(message);\r\n    });\r\n\r\n    // Listen room and users info from the server\r\n    socket.current.on(\"roomUsers\", ({ room, users }) => {\r\n      updateUsers(users);\r\n      setServerRoom(room);\r\n    });\r\n    return () => {\r\n      socket.current.disconnect();\r\n    };\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  //Sending message to the server\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    socket.current.emit(\"chatMessage\", msg);\r\n    setMsg(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* <div className=\"chat-container\"> */}\r\n      <header className=\"chat-header\">\r\n        <h1>\r\n          <i className=\"fas fa-smile\"></i> SportChat\r\n        </h1>\r\n        <Link to={\"/\"} id=\"leave-btn\" className=\"btn\">\r\n          Leave Room\r\n        </Link>\r\n      </header>\r\n      <main className=\"chat-main\">\r\n        <div className=\"chat-sidebar\">\r\n          <h3>\r\n            <i className=\"fas fa-comments\"></i> Room Name:\r\n          </h3>\r\n          <h2 id=\"room-name\">{serverRoom}</h2>\r\n          <h3>\r\n            <i className=\"fas fa-users\"></i> Users\r\n          </h3>\r\n          <ul id=\"users\">\r\n            {users &&\r\n              users.map((el) => {\r\n                return <li key={el.id}>{el.username}</li>;\r\n              })}\r\n          </ul>\r\n        </div>\r\n        <div className=\"chat-messages\">\r\n          {messages &&\r\n            messages.map((el, i) => {\r\n              return <Message key={i} el={el} />;\r\n            })}\r\n        </div>\r\n      </main>\r\n      <div className=\"chat-form-container\">\r\n        <form id=\"chat-form\" onSubmit={onSubmit}>\r\n          <input\r\n            onChange={(e) => setMsg(e.target.value.trim())}\r\n            value={msg}\r\n            id=\"msg\"\r\n            type=\"text\"\r\n            placeholder=\"Enter Message\"\r\n            required\r\n          />\r\n          <button className=\"btn\">\r\n            <i className=\"fas fa-paper-plane\"></i> Send\r\n          </button>\r\n        </form>\r\n      </div>\r\n      {/* </div> */}\r\n    </>\r\n  );\r\n};\r\n\r\nMessage.propTypes = {\r\n  users: PropTypes.array,\r\n  messages: PropTypes.array,\r\n  updateUsers: PropTypes.func,\r\n  updateMessages: PropTypes.func,\r\n};\r\n\r\nexport default Chat;\r\n","import { useState } from \"react\";\r\n\r\nconst Home = () => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [room, setRoom] = useState(\"Funs of Zenit\");\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    window.location = `/chat?username=${username}&room=${room}`;\r\n    setUsername(\"\");\r\n    setRoom(\"Funs of Zenit\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"join-container\">\r\n      <header className=\"join-header\">\r\n        <h1>\r\n          <i className=\"fas fa-smile\"></i>SportChat\r\n        </h1>\r\n      </header>\r\n      <main className=\"join-main\">\r\n        <form onSubmit={onSubmit}>\r\n          <div className=\"form-control\">\r\n            <label htmlFor=\"username\">Username</label>\r\n            <input\r\n              onChange={(e) => setUsername(e.target.value)}\r\n              value={username}\r\n              type=\"text\"\r\n              name=\"username\"\r\n              id=\"username\"\r\n              placeholder=\"Enter username...\"\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"form-control\">\r\n            <label htmlFor=\"room\">Room</label>\r\n            <select\r\n              name=\"room\"\r\n              id=\"room\"\r\n              onChange={(e) => setRoom(e.target.value)}\r\n              value={room}\r\n            >\r\n              <option value=\"Funs of Zenit\">Funs of Zenit</option>\r\n              <option value=\"Funs of Spartak\">Funs of Spartak</option>\r\n              <option value=\"Funs of CSKA\">Funs of CSKA</option>\r\n              <option value=\"Funs of Sochi\">Funs of Sochi</option>\r\n            </select>\r\n          </div>\r\n          <button type=\"submit\" className=\"btn\">\r\n            Join Chat\r\n          </button>\r\n        </form>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react'\r\nimport {useLocation, useHistory} from 'react-router-dom'\r\n\r\nconst NoMatch = () => {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n\r\n    setTimeout(() => {\r\n        history.push('/');\r\n    }, 3000)\r\n\r\n    return (\r\n        <div className=\"no-match\">\r\n            <p>Sorry, the page you are looking for at the <span>{location.pathname}</span>, does not exist</p>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NoMatch\r\n","import { useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Chat from \"./components/Chat\";\nimport Home from \"./components/Home\";\nimport NoMatch from \"./components/NoMatch\";\n\nconst App = () => {\n  const [users, setUsers] = useState([]);\n  const [messages, setMessages] = useState([]);\n\n  // List of users\n  const updateUsers = (users) => {\n    setUsers(users);\n  };\n\n  // List of messages\n  const updateMessages = (message) => {\n    setMessages((oldMsges) => [...oldMsges, message]);\n  };\n\n  return (\n    <Router>\n      <div className=\"chat-container\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/chat\">\n            <Chat\n              users={users}\n              updateUsers={updateUsers}\n              messages={messages}\n              updateMessages={updateMessages}\n            />\n          </Route>\n          <Route path={\"*\"}>\n            <NoMatch />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}