{"version":3,"sources":["components/Message.js","components/Chat.js","components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Message","el","className","username","time","text","Chat","users","updateUsers","messages","updateMessages","useState","msg","setMsg","serverRoom","setServerRoom","URLSearchParams","window","location","search","get","room","socket","useRef","useEffect","current","io","connect","emit","on","message","class","id","onClick","map","i","onSubmit","e","preventDefault","onChange","target","value","trim","type","placeholder","required","Home","setUsername","setRoom","console","log","for","name","App","setUsers","setMessages","oldUsers","exact","path","oldMsges","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.096b380c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Message = ({ el }) => {\r\n  return (\r\n    <div className=\"message\">\r\n      <p className=\"meta\">\r\n        {el.username}\r\n        <span>{el.time}</span>\r\n      </p>\r\n      <p className=\"text\">{el.text}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport Message from \"./Message\";\r\n\r\nconst Chat = ({ users, updateUsers, messages, updateMessages }) => {\r\n  const [msg, setMsg] = useState(\"\");\r\n  const [serverRoom, setServerRoom] = useState(\"\");\r\n  let username = new URLSearchParams(window.location.search).get(\"username\");\r\n  let room = new URLSearchParams(window.location.search).get(\"room\");\r\n\r\n  const socket = useRef();\r\n\r\n  useEffect(() => {\r\n    // Join chatroom\r\n    socket.current = io.connect(\"/\");\r\n    socket.current.emit(\"joinRoom\", { username, room });\r\n\r\n    //Listen Messages from the server\r\n    socket.current.on(\"message\", (message) => {\r\n      updateMessages(message);\r\n    });\r\n\r\n    // Listen room and users info from the server\r\n    socket.current.on(\"roomUsers\", ({ room, users }) => {\r\n      updateUsers(users);\r\n      setServerRoom(room);\r\n    });\r\n  }, []);\r\n\r\n  // if (users.username === undefined) {\r\n  //   window.location = \"/\";\r\n  //   alert(\"A username is not unique\");\r\n  // }\r\n\r\n  //Sending message to the server\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    socket.current.emit(\"chatMessage\", msg);\r\n    setMsg(\"\");\r\n  };\r\n\r\n  //Redirect when a user leaves a room\r\n  const onClick = () => {\r\n    window.location = \"/\";\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div class=\"chat-container\">\r\n        <header class=\"chat-header\">\r\n          <h1>\r\n            <i class=\"fas fa-smile\"></i> SportChat\r\n          </h1>\r\n          <a id=\"leave-btn\" class=\"btn\" onClick={onClick}>\r\n            Leave Room\r\n          </a>\r\n        </header>\r\n        <main class=\"chat-main\">\r\n          <div class=\"chat-sidebar\">\r\n            <h3>\r\n              <i class=\"fas fa-comments\"></i> Room Name:\r\n            </h3>\r\n            <h2 id=\"room-name\">{serverRoom}</h2>\r\n            <h3>\r\n              <i class=\"fas fa-users\"></i> Users\r\n            </h3>\r\n            <ul id=\"users\">\r\n              {users &&\r\n                users.map((el) => {\r\n                  return (\r\n                    <li key={el.id}>\r\n                      {el.username}\r\n                      <span> ({el.id})</span>\r\n                    </li>\r\n                  );\r\n                })}\r\n            </ul>\r\n          </div>\r\n          <div class=\"chat-messages\">\r\n            {messages &&\r\n              messages.map((el, i) => {\r\n                return <Message key={i} el={el} />;\r\n              })}\r\n          </div>\r\n        </main>\r\n        <div class=\"chat-form-container\">\r\n          <form id=\"chat-form\" onSubmit={onSubmit}>\r\n            <input\r\n              onChange={(e) => setMsg(e.target.value.trim())}\r\n              value={msg}\r\n              id=\"msg\"\r\n              type=\"text\"\r\n              placeholder=\"Enter Message\"\r\n              required\r\n            />\r\n            <button class=\"btn\">\r\n              <i class=\"fas fa-paper-plane\"></i> Send\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Home = ({ users, updateUsers }) => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [room, setRoom] = useState(\"Funs of Zenit\");\r\n  console.log(users);\r\n\r\n  const socket = useRef();\r\n  // useEffect(() => {\r\n  //   socket.current = io.connect(\"http://localhost:5000\");\r\n\r\n  //   //   // Listen room and users info from the server\r\n  //   socket.current.on(\"roomUsers\", ({ room, users }) => {\r\n  //     // updateUsers(users);\r\n  //     // setServerRoom(room);\r\n  //   });\r\n  // }, []);\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    window.location = `/chat?username=${username}&room=${room}`;\r\n  };\r\n\r\n  // const socket = io();\r\n  // action={\"/chat\"}\r\n  return (\r\n    <div class=\"join-container\">\r\n      <header class=\"join-header\">\r\n        <h1>\r\n          <i class=\"fas fa-smile\"></i>SportChat\r\n        </h1>\r\n      </header>\r\n      <main class=\"join-main\">\r\n        <form onSubmit={onSubmit}>\r\n          <div class=\"form-control\">\r\n            <label for=\"username\">Username</label>\r\n            <input\r\n              onChange={(e) => setUsername(e.target.value)}\r\n              value={username}\r\n              type=\"text\"\r\n              name=\"username\"\r\n              id=\"username\"\r\n              placeholder=\"Enter username...\"\r\n              required\r\n            />\r\n          </div>\r\n          <div class=\"form-control\">\r\n            <label for=\"room\">Room</label>\r\n            <select\r\n              name=\"room\"\r\n              id=\"room\"\r\n              onChange={(e) => setRoom(e.target.value)}\r\n              value={room}\r\n            >\r\n              <option value=\"Funs of Zenit\">Funs of Zenit</option>\r\n              <option value=\"Funs of Spartak\">Funs of Spartak</option>\r\n              <option value=\"Funs of CSKA\">Funs of CSKA</option>\r\n              <option value=\"Funs of Sochi\">Funs of Sochi</option>\r\n            </select>\r\n          </div>\r\n          {/* <Link to={\"./chat\"}> */}\r\n          <button type=\"submit\" class=\"btn\">\r\n            Join Chat\r\n          </button>\r\n          {/* </Link> */}\r\n        </form>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { useState, useEffect, useRef } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport io from \"socket.io-client\";\n\nimport Chat from \"./components/Chat\";\nimport Home from \"./components/Home\";\n\nconst socket = io.connect(\"/\");\n\nconst App = () => {\n  const [users, setUsers] = useState([]);\n  const [messages, setMessages] = useState([]);\n\n  // const socket = useRef();\n\n  // List of users\n  const updateUsers = (users) => {\n    setUsers((oldUsers) => [...users]);\n  };\n\n  // List of messages\n  const updateMessages = (message) => {\n    setMessages((oldMsges) => [...oldMsges, message]);\n  };\n\n  return (\n    <Router>\n      <div className=\"chat-container\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Home users={users} updateUsers={updateUsers} />\n          </Route>\n          <Route path=\"/chat\">\n            <Chat\n              users={users}\n              updateUsers={updateUsers}\n              messages={messages}\n              updateMessages={updateMessages}\n            />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}